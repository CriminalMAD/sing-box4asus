#!/bin/sh

# Function to find the root directory in /mnt and all subdirectories
find_root_directory() {
    find /mnt/ -depth -type d -name root
}

# Function to create a directory with 775 permissions
create_directory() {
    local dir_path="$1"
    mkdir -p "$dir_path"
    chmod 775 "$dir_path"  # Setting permissions to 775
    echo "Directory $dir_path created."
}

# Function to check if a directory exists
check_directory_existence() {
    local dir_path="$1"
    if [ -d "$dir_path" ]; then
        return 0 # Directory exists
    else
        return 1 # Directory does not exist
    fi
}

# Function to check file existence and provide options
check_file_existence_and_download() {
    local file_path="$1"
    local file_url="$2"
    local file_name=$(basename "$file_path")

    if [ -f "$file_path" ]; then
        echo "File $file_name already exists. What do you want to do?"
        echo "1. Skip downloading"
        echo "2. Replace the file"

        # Loop for providing choice until valid input
        while true; do
            read -p "Enter your choice number: " choice

            case $choice in
                1)
                    echo "Skipping download of $file_name."
                    return 0
                    ;;
                2)
                    echo "Replacing file $file_name."
                    curl -s -L -o "$file_path" "$file_url"
                    return 0
                    ;;
                *)
                    echo "Invalid choice. Please try again."
                    ;;
            esac
        done
    else
        echo "Downloading $file_name..."
        curl -s -L -o "$file_path" "$file_url"
    fi
}

# Finding the root directory
root_dir=$(find_root_directory)

if [ -n "$root_dir" ]; then
    # If root directory is found
    sing_box_dir="$root_dir/sing-box"
    
    if check_directory_existence "$sing_box_dir"; then
        echo "Directory $sing_box_dir already exists. What do you want to do?"
        echo "1. Quit script"
        echo "2. Use existing directory"
        
        # Loop for providing choice until valid input
        while true; do
            read -p "Enter your choice number: " choice
            
            case $choice in
                1)
                    echo "Script execution terminated."
                    exit 0
                    ;;
                2)
                    echo "Using existing directory $sing_box_dir."
                    break
                    ;;
                *)
                    echo "Invalid choice. Please try again."
                    ;;
            esac
        done
        
    else
        create_directory "$sing_box_dir"
    fi
else
    # If root directory is not found
    echo "'root' directory not found in /mnt. It seems your router doesn't have a USB flash drive installed, or Entware is not installed on it. Operation cancelled."
    exit 1
fi

# URL for releases page (API to fetch release information)
URL="https://api.github.com/repos/SagerNet/sing-box/releases/latest"

# Archive file name
ARCHIVE_FILE="sing-box-linux-arm64.tar.gz"

# Path to download directory
DOWNLOAD_DIR="$sing_box_dir/sing-box-download"

# Checking if download directory exists, otherwise creating it
if [ ! -d "$DOWNLOAD_DIR" ]; then
    mkdir -p "$DOWNLOAD_DIR"
    chmod 775 "$DOWNLOAD_DIR"  # Setting permissions to 775
fi

# Using curl to fetch information about the latest release
RESPONSE=$(curl -s -H "Accept: application/vnd.github.v3+json" "$URL")

# Extracting download URL for the archive
DOWNLOAD_URL=$(echo "$RESPONSE" | grep -o '"browser_download_url":\s*"[^"]*linux-arm64.tar.gz"' | grep -o 'https://.*linux-arm64.tar.gz')

if [ -z "$DOWNLOAD_URL" ]; then
    echo "Failed to find download link for the archive."
    exit 1
fi

# Full path to the archive file
FULL_PATH="$DOWNLOAD_DIR/$ARCHIVE_FILE"

# Downloading the archive
echo "Downloading archive..."
curl -s -L -o "$FULL_PATH" "$DOWNLOAD_URL"

# Extracting the archive
echo "Extracting archive..."
tar -xzf "$FULL_PATH" -C "$DOWNLOAD_DIR"

# Finding the sing-box file in the extracted subdirectory
sing_box_file=$(find "$DOWNLOAD_DIR" -name "sing-box" -type f)

if [ -z "$sing_box_file" ]; then
    echo "Failed to find sing-box file in the extracted archive."
    exit 1
fi

# Checking if sing-box file exists in sing_box_dir
sing_box_path="$sing_box_dir/sing-box"
if [ -f "$sing_box_path" ]; then
    echo "File sing-box already exists. What do you want to do?"
    echo "1. Keep existing file"
    echo "2. Replace with new file"

    # Loop for providing choice until valid input
    while true; do
        read -p "Enter your choice number: " choice

        case $choice in
            1)
                echo "Keeping existing sing-box file."
                ;;
            2)
                echo "Replacing sing-box file with new one."
                cp "$sing_box_file" "$sing_box_dir/"
                chmod 775 $sing_box_path
                ;;
            *)
                echo "Invalid choice. Please try again."
                continue
                ;;
        esac
        break
    done
else
    echo "Saving sing-box file..."
    cp "$sing_box_file" "$sing_box_dir/"
fi

# Removing directory /mnt/entware/entware/root/sing-box/sing-box-download
rm -rf "$DOWNLOAD_DIR"

# Downloading config.json
CONFIG_URL="https://raw.githubusercontent.com/Dr4tez/sing-box4asus/main/config.json"
CONFIG_PATH="$sing_box_dir/config.json"
check_file_existence_and_download "$CONFIG_PATH" "$CONFIG_URL"
chmod 664 $CONFIG_PATH

# Downloading sing-box.sh
SCRIPT_URL="https://raw.githubusercontent.com/Dr4tez/sing-box4asus/main/sing-box.sh"
SCRIPT_PATH="$sing_box_dir/sing-box.sh"
check_file_existence_and_download "$SCRIPT_PATH" "$SCRIPT_URL"
chmod 775 $SCRIPT_PATH

echo "
*********************
Installation completed.
*********************
Next, you should manually customize the config.json file located at $CONFIG_PATH
For example, using WinSCP or via console with the command:
nano $CONFIG_PATH
Only after that, you can execute the following commands in the console:

To set up the sing-box script:
$SCRIPT_PATH setup

To start sing-box:
$SCRIPT_PATH start

To stop sing-box:
$SCRIPT_PATH stop

To restart sing-box:
$SCRIPT_PATH restart"
