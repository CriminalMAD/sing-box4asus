#!/bin/sh

# Version 1.3
# Script for running Sing-Box on Asus routers with Merlin firmware and Entware installed on a USB drive.

# Variables
JFFS_SB_DIR="/jffs/addons/sing-box-script"
SB_CONFIG="$JFFS_SB_DIR/config.json"
SCRIPT_PATH="$JFFS_SB_DIR/sbs"
SCRIPT_URL="https://raw.githubusercontent.com/Dr4tez/sing-box4asus/main/sbs"
SB_CONFIG_URL="https://raw.githubusercontent.com/Dr4tez/sing-box4asus/main/config.json"
SBS_CONF="$JFFS_SB_DIR/sbs-conf"
SBS_MON="$JFFS_SB_DIR/sbs-monitor"
TEMP_UPDATE="$JFFS_SB_DIR/temp-update"
ROOT_DIR="/opt/root"
SB_DIR="$ROOT_DIR/sing-box"
SB_PATH="$SB_DIR/sing-box"
SB_URL="https://api.github.com/repos/SagerNet/sing-box/releases/latest"
SB_DOWNLOAD_DIR="$SB_DIR/sing-box-download"
SB_ARCHIVE64_PATH="$SB_DOWNLOAD_DIR/sing-box-linux-arm64.tar.gz"
SB_ARCHIVE_PATH="$SB_DOWNLOAD_DIR/sing-box-linux-armv7.tar.gz"
SB_DOWNLOAD64_URL=$(curl -s -H "Accept: application/vnd.github.v3+json" "$SB_URL" | grep -o '"browser_download_url":\s*"[^"]*linux-arm64.tar.gz"' | grep -o 'https://.*linux-arm64.tar.gz')
SB_DOWNLOAD_URL=$(curl -s -H "Accept: application/vnd.github.v3+json" "$SB_URL" | grep -o '"browser_download_url":\s*"[^"]*linux-armv7.tar.gz"' | grep -o 'https://.*linux-armv7.tar.gz')
FW_SCRIPT="/jffs/scripts/firewall-start"
NAT_SCRIPT="/jffs/scripts/nat-start"
SS_SCRIPT="/jffs/scripts/services-start"
SS_LINES="(sleep 30 && $SCRIPT_PATH start) &"
LN_PATH="/opt/bin/sbs"

# Functions
log_msg() {
    echo "$1"
    logger -t "sbs" "$1"
}

create_dir() {
    mkdir -p "$1"
    chmod 775 "$1"
    echo "Directory $1 created."
}

create_sbs_conf() {
    cat << EOF > "$1"
# SBS version 1.3
# This file is created automatically and the values are entered via the command line when executing the 'sbs setup' command.
# If you want to change the values here using an editor bypassing the 'sbs setup' command, then before doing so, be sure to stop sing-box with the 'sbs stop' command in the command line.

# In the DEVICE_IPS line, inside the quotation marks, enter the IP addresses of the devices whose traffic you want to route through the corresponding TUN_INTERFACE. The IP addresses must be entered on one line and separated by spaces. You can also enter a subnet in CIDR format, such as 192.168.50.0/24.
# In the EXC_DEVICE_IPS line, you can enter the IP addresses of the devices whose traffic you want to exclude from the sing-box, if you entered a subnet in the DEVICE_IPS line.
# If the specified ROUTE_TABLE values (routing table numbers) on your router are already taken, which is unlikely, assign other numbers that are not taken.
# TUN_INTERFACE and LISTEN_DNS_PORT values are determined automatically based on data from your sing-box configuration file.
# DNS_CHOICE values: router (default) - DNS specified in the router settings is used, sing-box - DNS specified in the sing-box configuration file is used.

DEVICE_IPS1=""
EXC_DEVICE_IPS1=""
ROUTE_TABLE1="555"
TUN_INTERFACE1=""
LISTEN_DNS_PORT1=""

DEVICE_IPS2=""
EXC_DEVICE_IPS2=""
ROUTE_TABLE2="556"
TUN_INTERFACE2=""
LISTEN_DNS_PORT2=""

DNS_CHOICE="router"
EOF
    chmod 664 "$1"
}

create_sbs_monitor() {
    cat << EOF > "$1"
#!/bin/sh

# SBS version 1.3

source "$SBS_CONF"

add_cidr_rule() {
    local device_ips=\$1
    local exc_device_ips=\$2
    local route_table=\$3

    for IP in \$device_ips; do
        if echo \$IP | grep -q '/'; then
            if ! ip rule show | grep -q "\$IP lookup \$route_table"; then
                ip rule add from \$IP lookup \$route_table
            fi
        fi
    done
    for IP in \$exc_device_ips; do
        if ! ip rule show | grep -q "\$IP lookup main"; then
            ip rule add from \$IP lookup main
        fi
    done
}

add_ip_rule() {
    local device_ips=\$1
    local route_table=\$2

    for IP in \$device_ips; do
        if ! echo \$IP | grep -q '/'; then
            if ! ip rule show | grep -q "\$IP lookup \$route_table"; then
                ip rule add from \$IP lookup \$route_table
            fi
        fi
    done
}

sbs_monitor_rr() {
    { ip monitor route | while read _; do
        if [ -n "\$DEVICE_IPS1" ] && [ -n "\$ROUTE_TABLE1" ] && [ -n "\$TUN_INTERFACE1" ]; then
            ip route add default dev \$TUN_INTERFACE1 table \$ROUTE_TABLE1 2>/dev/null
            ip route show table main | grep -v '^default' | while read ROUTE; do ip route add \$ROUTE table \$ROUTE_TABLE1 2>/dev/null; done
            ip route show table \$ROUTE_TABLE1 | grep -v '^default' | while read ROUTE; do
                if ! ip route show table main | grep -q "^\$ROUTE"; then
                    ip route del \$ROUTE table \$ROUTE_TABLE1 2>/dev/null
                fi
            done
        fi
        if [ -n "\$DEVICE_IPS2" ] && [ -n "\$ROUTE_TABLE2" ] && [ -n "\$TUN_INTERFACE2" ]; then
            ip route add default dev \$TUN_INTERFACE2 table \$ROUTE_TABLE2 2>/dev/null
            ip route show table main | grep -v '^default' | while read ROUTE; do ip route add \$ROUTE table \$ROUTE_TABLE2 2>/dev/null; done
            ip route show table \$ROUTE_TABLE2 | grep -v '^default' | while read ROUTE; do
                if ! ip route show table main | grep -q "^\$ROUTE"; then
                    ip route del \$ROUTE table \$ROUTE_TABLE2 2>/dev/null
                fi
            done
        fi
    done } &

    ip monitor rule | while read line; do
        if [ -n "\$DEVICE_IPS1" ] && [ -n "\$ROUTE_TABLE1" ] && [ -n "\$TUN_INTERFACE1" ]; then
            add_cidr_rule "\$DEVICE_IPS1" "\$EXC_DEVICE_IPS1" "\$ROUTE_TABLE1"
        fi
        if [ -n "\$DEVICE_IPS2" ] && [ -n "\$ROUTE_TABLE2" ] && [ -n "\$TUN_INTERFACE2" ]; then
            add_cidr_rule "\$DEVICE_IPS2" "\$EXC_DEVICE_IPS2" "\$ROUTE_TABLE2"
        fi
        if [ -n "\$DEVICE_IPS1" ] && [ -n "\$ROUTE_TABLE1" ] && [ -n "\$TUN_INTERFACE1" ]; then
            add_ip_rule "\$DEVICE_IPS1" "\$ROUTE_TABLE1"
        fi
        if [ -n "\$DEVICE_IPS2" ] && [ -n "\$ROUTE_TABLE2" ] && [ -n "\$TUN_INTERFACE2" ]; then
            add_ip_rule "\$DEVICE_IPS2" "\$ROUTE_TABLE2"
        fi
    done
}

trap '' SIGHUP
sbs_monitor_rr 2>/dev/null
EOF
    chmod 775 "$1"
}

check_file_existence_and_download() {
    local file_path="$1"
    local file_url="$2"
    local file_name=$(basename "$file_path")

    if [ -f "$file_path" ]; then
        echo "The file $file_name already exists. What do you want to do?"
        while true; do
            read -p "1-Skip download, 2-Download and replace file: " choice
            case $choice in
                1) echo "Download of $file_name skipped."; return 0 ;;
                2) echo "Download and replace the file $file_name"; curl -s -L -o "$file_path" "$file_url"; return 0 ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        echo "Downloading $file_name..."
        curl -s -L -o "$file_path" "$file_url"
    fi
}

delete_if_not_current_dir() {
  local current_dir=$(dirname "$(readlink -f "$0")")

  if [ "$current_dir" != "$JFFS_SB_DIR" ]; then
    rm -f "$(readlink -f "$0")"
  fi
}

create_or_use_existing() {
    local dir_path="$1"

    if [ -d "$dir_path" ]; then
        echo "The directory $dir_path already exists. What do you want to do?"
        while true; do
            read -p "1-Quit, 2-Use current directory: " choice
            case $choice in
                1) delete_if_not_current_dir; echo "The script has completed its work."; exit 0 ;;
                2) echo "Use current directory $dir_path"; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        create_dir "$dir_path"
    fi
}

handle_existing_file() {
    local file_path="$1"
    local create_function="$2"

    if [ -f "$file_path" ]; then
        echo "The file $file_path already exists. What do you want to do?"
        while true; do
            read -p "1-Leave the current file, 2-Replace the file: " choice
            case $choice in
                1) echo "We leave the current file."; break ;;
                2) echo "Replace the $file_path file."; "$create_function" "$file_path"; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        "$create_function" "$file_path"
    fi
}

update_script() {
    [ -f "$1" ] || { echo "#!/bin/sh" > "$1"; chmod 755 "$1"; }
    echo "$2" | while IFS= read -r line; do
        grep -qF "$line" "$1" || echo "$line" >> "$1"
    done
}

remove_script_content() {
    [ -f "$1" ] && echo "$2" | while read -r line; do
        sed -i "/$(echo "$line" | sed 's/[\/&]/\\&/g')/d" "$1"
    done
}

manage_iptables() {
    if [ "$1" = "add" ]; then
        iptables -C $2 2>/dev/null || iptables -I $2 || log_msg "Error adding iptables rule: $2"
    elif [ "$1" = "remove" ]; then
        iptables -C $2 2>/dev/null && iptables -D $2 || log_msg "Error removing iptables rule: $2"
    fi
}

manage_iptables_nat() {
    if [ "$1" = "add" ]; then
        iptables -t nat -C $2 2>/dev/null || iptables -t nat -A $2 || log_msg "Error adding nat rule: $2"
    elif [ "$1" = "remove" ]; then
        iptables -t nat -C $2 2>/dev/null && iptables -t nat -D $2 || log_msg "Error deleting nat rule: $2"
    fi
}

is_running() {
    ps | grep -v grep | grep -q "$SB_PATH"
}

get_sbs_version() {
    sed -n '3s/^# Version //p' "$1"
}

get_sb_versplat() {
    local vers plat

    vers=$("$1" version | awk '/^sing-box version/ {print $3}' | head -n 1)
    plat=$("$1" version | awk '/^Environment:/ {print $3}' | head -n 1)
    echo "$vers $plat"
}

get_sb_version() {
    local version

    version=$("$1" version | awk '/^sing-box version/ {print $3}' | head -n 1)
    echo "$version"
}

self_copy() {
    local destination="$1"

    cp "$0" "$destination"
}

silent_create_dir() {
    mkdir -p "$1"
    chmod 775 "$1"
}

sing_box_start() {
    echo "Launch sing-box?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "sing-box is not launched."; break ;;
            2) start_sing_box; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
}

update_sbs_interfaces() {
    INTERFACES=$(awk -F'"' '/"interface_name":/ {print $4}' "$SB_CONFIG")
    TUN_INTERFACE1=$(grep '^TUN_INTERFACE1=' "$SBS_CONF" | cut -d '"' -f 2)
    TUN_INTERFACE2=$(grep '^TUN_INTERFACE2=' "$SBS_CONF" | cut -d '"' -f 2)
    DEVICE_IPS1=$(grep '^DEVICE_IPS1=' "$SBS_CONF" | cut -d '"' -f 2)
    DEVICE_IPS2=$(grep '^DEVICE_IPS2=' "$SBS_CONF" | cut -d '"' -f 2)
    EXC_DEVICE_IPS1=$(grep '^EXC_DEVICE_IPS1=' "$SBS_CONF" | cut -d '"' -f 2)
    EXC_DEVICE_IPS2=$(grep '^EXC_DEVICE_IPS2=' "$SBS_CONF" | cut -d '"' -f 2)
    FOUND1=false
    FOUND2=false
    NEW_INTERFACE1=""
    NEW_INTERFACE2=""
    for INTERFACE in $INTERFACES; do
        if [ "$INTERFACE" = "$TUN_INTERFACE1" ]; then
            FOUND1=true
        elif [ "$INTERFACE" = "$TUN_INTERFACE2" ]; then
            FOUND2=true
        else
            if [ -z "$NEW_INTERFACE1" ]; then
                NEW_INTERFACE1="$INTERFACE"
            elif [ -z "$NEW_INTERFACE2" ]; then
                NEW_INTERFACE2="$INTERFACE"
            fi
        fi
    done
    update_sbs_conf() {
        sed -i "s|^TUN_INTERFACE1=\"[^\"]*\"|TUN_INTERFACE1=\"$1\"|" "$SBS_CONF"
        sed -i "s|^DEVICE_IPS1=\"[^\"]*\"|DEVICE_IPS1=\"$2\"|" "$SBS_CONF"
        sed -i "s|^EXC_DEVICE_IPS1=\"[^\"]*\"|EXC_DEVICE_IPS1=\"$3\"|" "$SBS_CONF"
        sed -i "s|^TUN_INTERFACE2=\"[^\"]*\"|TUN_INTERFACE2=\"$4\"|" "$SBS_CONF"
        sed -i "s|^DEVICE_IPS2=\"[^\"]*\"|DEVICE_IPS2=\"$5\"|" "$SBS_CONF"
        sed -i "s|^EXC_DEVICE_IPS2=\"[^\"]*\"|EXC_DEVICE_IPS2=\"$6\"|" "$SBS_CONF"
    }

    if $FOUND1 && $FOUND2; then
        return 0
    elif ! $FOUND1 && ! $FOUND2; then
        update_sbs_conf "$NEW_INTERFACE1" "" "" "$NEW_INTERFACE2" "" ""
    elif $FOUND1 && ! $FOUND2; then
        update_sbs_conf "$TUN_INTERFACE1" "$DEVICE_IPS1" "$EXC_DEVICE_IPS1" "$NEW_INTERFACE1" "" ""
    elif ! $FOUND1 && $FOUND2; then
        update_sbs_conf "$NEW_INTERFACE1" "" "" "$TUN_INTERFACE2" "$DEVICE_IPS2" "$EXC_DEVICE_IPS2"
    fi
}

find_cidrs() {
    cidrs=""
    for ip in $1; do
        if echo "$ip" | grep -q '/'; then
            cidrs="$cidrs $ip"
        fi
    done
    echo $cidrs
}

add_cidr_rules() {
    local device_ips=$1
    local route_table=$2

    for IP in $device_ips; do
        if echo "$IP" | grep -q '/'; then
            ip rule add from $IP lookup $route_table
        fi
    done
}

add_ip_rules() {
    local device_ips=$1
    local route_table=$2

    for IP in $device_ips; do
        if ! echo "$IP" | grep -q '/'; then
            ip rule add from $IP lookup $route_table
        fi
    done
}

extract_listen_dns_ports() {
    listen_dns_ports=$(grep -B1 '"override_port": 53' "$SB_CONFIG" | grep '"listen_port"' | sed -E 's/.*"listen_port": ([0-9]+),.*/\1/')
    dns_port_count=0
    for dns_port in $listen_dns_ports; do
        dns_port_count=$((dns_port_count + 1))
        if [ $dns_port_count -eq 1 ]; then
            sed -i "s/^LISTEN_DNS_PORT1=.*/LISTEN_DNS_PORT1=\"$dns_port\"/" "$SBS_CONF"
        elif [ $dns_port_count -eq 2 ]; then
            sed -i "s/^LISTEN_DNS_PORT2=.*/LISTEN_DNS_PORT2=\"$dns_port\"/" "$SBS_CONF"
        else
            break
        fi
    done
    if [ $dns_port_count -lt 1 ]; then
        sed -i 's/^LISTEN_DNS_PORT1=.*/LISTEN_DNS_PORT1=""/' "$SBS_CONF"
    fi
    if [ $dns_port_count -lt 2 ]; then
        sed -i 's/^LISTEN_DNS_PORT2=.*/LISTEN_DNS_PORT2=""/' "$SBS_CONF"
    fi
}

start_sing_box() {
    echo ""
    log_msg "Launch sing-box..."
    is_running && { log_msg "Error: sing-box is already running."; exit 1; }

    source "$SBS_CONF"
    update_sbs_interfaces
    extract_listen_dns_ports
    source "$SBS_CONF"

    if [ -n "$TUN_INTERFACE1" ]; then
        FW_RULES1="FORWARD -i $TUN_INTERFACE1 -j ACCEPT
        FORWARD -o $TUN_INTERFACE1 -j ACCEPT
        INPUT -i $TUN_INTERFACE1 -j ACCEPT
        OUTPUT -o $TUN_INTERFACE1 -j ACCEPT"
    fi
    if [ -n "$TUN_INTERFACE2" ]; then
        FW_RULES2="FORWARD -i $TUN_INTERFACE2 -j ACCEPT
        FORWARD -o $TUN_INTERFACE2 -j ACCEPT
        INPUT -i $TUN_INTERFACE2 -j ACCEPT
        OUTPUT -o $TUN_INTERFACE2 -j ACCEPT"
    fi

    lsmod | grep -q "^tun " || { log_msg "Loading TUN module."; modprobe tun; }

    $SB_PATH run -c $SB_CONFIG &
    sleep 3

    interface1_exists=false
    interface2_exists=false

    if ip link show "$TUN_INTERFACE1" >/dev/null 2>&1; then
        log_msg "TUN interface $TUN_INTERFACE1 detected."
        interface1_exists=true
    else
        interface1_exists=false
    fi
    if ip link show "$TUN_INTERFACE2" >/dev/null 2>&1; then
        log_msg "TUN interface $TUN_INTERFACE2 detected."
        interface2_exists=true
    else
        interface2_exists=false
    fi
    if [ "$interface1_exists" = false ] && [ "$interface2_exists" = false ]; then
        log_msg "TUN interfaces not found."
    fi
    if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ]; then
        log_msg "Adding firewall rules for $TUN_INTERFACE1 interface."
        echo "$FW_RULES1" | while read -r rule; do
            manage_iptables "add" "$rule"
            update_script "$FW_SCRIPT" "iptables -I $rule"
        done
    fi
    if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ]; then
        log_msg "Adding firewall rules for $TUN_INTERFACE2 interface."
        echo "$FW_RULES2" | while read -r rule; do
            manage_iptables "add" "$rule"
            update_script "$FW_SCRIPT" "iptables -I $rule"
        done
    fi
    if [ "$DNS_CHOICE" = "sing-box" ]; then
        if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ] && [ -n "$LISTEN_DNS_PORT1" ]; then
            ipset create sbsinc-ipset1 hash:net
            for ip in $DEVICE_IPS1; do
                ipset add sbsinc-ipset1 $ip
            done
            if [ -n "$EXC_DEVICE_IPS1" ]; then
                ipset create sbsexc-ipset1 hash:net
                for ip in $EXC_DEVICE_IPS1; do
                    ipset add sbsexc-ipset1 $ip
                done
            fi
            if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ]; then
                if ipset list sbsexc-ipset1 >/dev/null 2>&1; then
                    for ip in $DEVICE_IPS2; do
                        ipset add sbsexc-ipset1 $ip
                    done
                else
                    ipset create sbsexc-ipset1 hash:net
                    for ip in $DEVICE_IPS2; do
                        ipset add sbsexc-ipset1 $ip
                    done
                fi
            fi
            NAT_RULES1="PREROUTING -p tcp -m set --match-set sbsinc-ipset1 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1
            PREROUTING -p udp -m set --match-set sbsinc-ipset1 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1"
            NAT_EXC_RULES1="PREROUTING -p tcp -m set --match-set sbsinc-ipset1 src -m set ! --match-set sbsexc-ipset1 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1
            PREROUTING -p udp -m set --match-set sbsinc-ipset1 src -m set ! --match-set sbsexc-ipset1 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1"
            if ipset list sbsinc-ipset1 >/dev/null 2>&1; then
                log_msg "Adding nat rules for $TUN_INTERFACE1 interface."
                if ipset list sbsexc-ipset1 >/dev/null 2>&1; then
                    echo "$NAT_EXC_RULES1" | while read -r rule; do
                        manage_iptables_nat "add" "$rule"
                        update_script "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                else
                    echo "$NAT_RULES1" | while read -r rule; do
                        manage_iptables_nat "add" "$rule"
                        update_script "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                fi
            fi
        fi
        if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ] && [ -n "$LISTEN_DNS_PORT2" ]; then
            ipset create sbsinc-ipset2 hash:net
            for ip in $DEVICE_IPS2; do
                ipset add sbsinc-ipset2 $ip
            done
            if [ -n "$EXC_DEVICE_IPS2" ]; then
                ipset create sbsexc-ipset2 hash:net
                for ip in $EXC_DEVICE_IPS2; do
                    ipset add sbsexc-ipset2 $ip
                done
            fi
            if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ]; then
                if ipset list sbsexc-ipset2 >/dev/null 2>&1; then
                    for ip in $DEVICE_IPS1; do
                        ipset add sbsexc-ipset2 $ip
                    done
                else
                    ipset create sbsexc-ipset2 hash:net
                    for ip in $DEVICE_IPS1; do
                        ipset add sbsexc-ipset2 $ip
                    done
                fi
            fi
            NAT_RULES2="PREROUTING -p tcp -m set --match-set sbsinc-ipset2 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2
            PREROUTING -p udp -m set --match-set sbsinc-ipset2 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2"
            NAT_EXC_RULES2="PREROUTING -p tcp -m set --match-set sbsinc-ipset2 src -m set ! --match-set sbsexc-ipset2 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2
            PREROUTING -p udp -m set --match-set sbsinc-ipset2 src -m set ! --match-set sbsexc-ipset2 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2"
            if ipset list sbsinc-ipset2 >/dev/null 2>&1; then
                log_msg "Adding nat rules for $TUN_INTERFACE2 interface."
                if ipset list sbsexc-ipset2 >/dev/null 2>&1; then
                    echo "$NAT_EXC_RULES2" | while read -r rule; do
                        manage_iptables_nat "add" "$rule"
                        update_script "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                else
                    echo "$NAT_RULES2" | while read -r rule; do
                        manage_iptables_nat "add" "$rule"
                        update_script "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                fi
            fi
        fi
    fi
    if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ]; then
        log_msg "Adding routes and rules for the $TUN_INTERFACE1 interface."
        ip route add default dev $TUN_INTERFACE1 table $ROUTE_TABLE1
        ip route show table main | grep -v '^default' | while read ROUTE; do ip route add $ROUTE table $ROUTE_TABLE1; done
        add_cidr_rules "$DEVICE_IPS1" "$ROUTE_TABLE1"
        if [ -n "$EXC_DEVICE_IPS1" ]; then
            for IP in $EXC_DEVICE_IPS1; do
                ip rule add from $IP lookup main
            done
        fi
    fi
    if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ]; then
        log_msg "Adding routes and rules for the $TUN_INTERFACE2 interface."
        ip route add default dev $TUN_INTERFACE2 table $ROUTE_TABLE2
        ip route show table main | grep -v '^default' | while read ROUTE; do ip route add $ROUTE table $ROUTE_TABLE2; done
        add_cidr_rules "$DEVICE_IPS2" "$ROUTE_TABLE2"
        if [ -n "$EXC_DEVICE_IPS2" ]; then
            for IP in $EXC_DEVICE_IPS2; do
                ip rule add from $IP lookup main
            done
        fi
    fi
    if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ]; then
        add_ip_rules "$DEVICE_IPS1" "$ROUTE_TABLE1"
    fi
    if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ]; then
        add_ip_rules "$DEVICE_IPS2" "$ROUTE_TABLE2"
    fi

    log_msg "Adding a script to autostart."
    update_script "$SS_SCRIPT" "$SS_LINES"

    $SBS_MON &
    log_msg "sing-box is running."
}

stop_sing_box() {
    echo ""
    log_msg "Stopping sing-box..."

    source "$SBS_CONF"

    if [ -n "$TUN_INTERFACE1" ]; then
        FW_RULES1="FORWARD -i $TUN_INTERFACE1 -j ACCEPT
        FORWARD -o $TUN_INTERFACE1 -j ACCEPT
        INPUT -i $TUN_INTERFACE1 -j ACCEPT
        OUTPUT -o $TUN_INTERFACE1 -j ACCEPT"
    fi
    if [ -n "$TUN_INTERFACE2" ]; then
        FW_RULES2="FORWARD -i $TUN_INTERFACE2 -j ACCEPT
        FORWARD -o $TUN_INTERFACE2 -j ACCEPT
        INPUT -i $TUN_INTERFACE2 -j ACCEPT
        OUTPUT -o $TUN_INTERFACE2 -j ACCEPT"
    fi

    log_msg "Removing a script from autostart."
    remove_script_content "$SS_SCRIPT" "$SS_LINES"

    pids=$(pidof "sbs-monitor")
    if [ -z "$pids" ]; then
      break
    fi
    for pid in $pids; do
      kill "$pid"
    done

    if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ]; then
        log_msg "Removing routes and rules for $TUN_INTERFACE1 interface."
        for IP in $DEVICE_IPS1; do
            ip rule del from $IP lookup $ROUTE_TABLE1
        done
        if [ -n "$EXC_DEVICE_IPS1" ]; then
            for IP in $EXC_DEVICE_IPS1; do
                ip rule del from $IP lookup main
            done
        fi
        ip route flush table $ROUTE_TABLE1
    fi
    if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ]; then
        log_msg "Removing routes and rules for $TUN_INTERFACE2 interface."
        for IP in $DEVICE_IPS2; do
            ip rule del from $IP lookup $ROUTE_TABLE2
        done
        if [ -n "$EXC_DEVICE_IPS2" ]; then
            for IP in $EXC_DEVICE_IPS2; do
                ip rule del from $IP lookup main
            done
        fi
        ip route flush table $ROUTE_TABLE2
    fi
    if [ "$DNS_CHOICE" = "sing-box" ]; then
        if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ] && [ -n "$LISTEN_DNS_PORT1" ]; then
            NAT_RULES1="PREROUTING -p tcp -m set --match-set sbsinc-ipset1 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1
            PREROUTING -p udp -m set --match-set sbsinc-ipset1 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1"
            NAT_EXC_RULES1="PREROUTING -p tcp -m set --match-set sbsinc-ipset1 src -m set ! --match-set sbsexc-ipset1 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1
            PREROUTING -p udp -m set --match-set sbsinc-ipset1 src -m set ! --match-set sbsexc-ipset1 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT1"
            if ipset list sbsinc-ipset1 >/dev/null 2>&1; then
                log_msg "Removing nat rules for $TUN_INTERFACE1 interface."
                if ipset list sbsexc-ipset1 >/dev/null 2>&1; then
                    echo "$NAT_EXC_RULES1" | while read -r rule; do
                        manage_iptables_nat "remove" "$rule"
                        remove_script_content "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                    ipset destroy sbsinc-ipset1
                    ipset destroy sbsexc-ipset1
                else
                    echo "$NAT_RULES1" | while read -r rule; do
                        manage_iptables_nat "remove" "$rule"
                        remove_script_content "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                    ipset destroy sbsinc-ipset1
                fi
            fi
        fi
        if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ] && [ -n "$LISTEN_DNS_PORT2" ]; then
            NAT_RULES2="PREROUTING -p tcp -m set --match-set sbsinc-ipset2 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2
            PREROUTING -p udp -m set --match-set sbsinc-ipset2 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2"
            NAT_EXC_RULES2="PREROUTING -p tcp -m set --match-set sbsinc-ipset2 src -m set ! --match-set sbsexc-ipset2 src -m tcp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2
            PREROUTING -p udp -m set --match-set sbsinc-ipset2 src -m set ! --match-set sbsexc-ipset2 src -m udp --dport 53 -j DNAT --to-destination :$LISTEN_DNS_PORT2"
            if ipset list sbsinc-ipset2 >/dev/null 2>&1; then
                log_msg "Removing nat rules for $TUN_INTERFACE2 interface."
                if ipset list sbsexc-ipset2 >/dev/null 2>&1; then
                    echo "$NAT_EXC_RULES2" | while read -r rule; do
                        manage_iptables_nat "remove" "$rule"
                        remove_script_content "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                    ipset destroy sbsinc-ipset2
                    ipset destroy sbsexc-ipset2
                else
                    echo "$NAT_RULES2" | while read -r rule; do
                        manage_iptables_nat "remove" "$rule"
                        remove_script_content "$NAT_SCRIPT" "iptables -t nat -A $rule"
                    done
                    ipset destroy sbsinc-ipset2
                fi
            fi
        fi
    fi
    if [ -n "$TUN_INTERFACE1" ] && [ -n "$ROUTE_TABLE1" ] && [ -n "$DEVICE_IPS1" ]; then
        log_msg "Removing firewall rules for $TUN_INTERFACE1 interface."
        echo "$FW_RULES1" | while read -r rule; do
            manage_iptables "remove" "$rule"
            remove_script_content "$FW_SCRIPT" "iptables -I $rule"
        done
    fi
    if [ -n "$TUN_INTERFACE2" ] && [ -n "$ROUTE_TABLE2" ] && [ -n "$DEVICE_IPS2" ]; then
        log_msg "Removing firewall rules for $TUN_INTERFACE2 interface."
        echo "$FW_RULES2" | while read -r rule; do
            manage_iptables "remove" "$rule"
            remove_script_content "$FW_SCRIPT" "iptables -I $rule"
        done
    fi

    PIDS=$(pidof "sing-box")
    if [ -z "$PIDS" ]; then
      break
    fi
    for pid in $PIDS; do
      kill "$pid"
    done

    log_msg "sing-box has stopped."
}

configure_interface1() {
    source "$SBS_CONF"

    if [ -z "$DEVICE_IPS1" ]; then
        echo ""
        echo "Enter IP addresses of devices for $TUN_INTERFACE1 interface?"
    else
        echo ""
        echo "Current IP addresses of devices for $TUN_INTERFACE1 interface: $DEVICE_IPS1"
        echo "Enter other IP addresses instead of these?"
    fi
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to enter IP addresses."; break ;;
            2) read -p "Enter IP addresses: " new_ips1
               DEVICE_IPS1="$new_ips1"
               sed -i "s|^DEVICE_IPS1=\".*\"$|DEVICE_IPS1=\"$new_ips1\"|" "$SBS_CONF"
               log_msg "IP addresses of devices for $TUN_INTERFACE1 interface have been changed."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    local cidrs=$(find_cidrs "$DEVICE_IPS1")
    if [ -n "$cidrs" ]; then
        if [ -z "$EXC_DEVICE_IPS1" ]; then
            echo ""
            echo "For the $TUN_INTERFACE1 interface, you specified the following subnets: $cidrs"
            echo "Enter IP addresses of devices from these subnets to exclude them from the $TUN_INTERFACE1 interface?"
        else
            echo ""
            echo "For the $TUN_INTERFACE1 interface, you specified the following subnets: $cidrs"
            echo "Current IP addresses of devices from these subnets to exclude them from the $TUN_INTERFACE1 interface: $EXC_DEVICE_IPS1"
            echo "Enter other IP addresses instead of these?"
        fi
        while true; do
            read -p "1-No, 2-Yes: " choice_exc
            case "$choice_exc" in
                1) echo "Refusing to enter IP addresses."; break ;;
                2) read -p "Enter IP addresses: " exc_new_ips1
                   EXC_DEVICE_IPS1="$exc_new_ips1"
                   sed -i "s|^EXC_DEVICE_IPS1=\".*\"$|EXC_DEVICE_IPS1=\"$exc_new_ips1\"|" "$SBS_CONF"
                   log_msg "IP addresses of devices to exclude from the $TUN_INTERFACE1 interface have been entered."; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        EXC_DEVICE_IPS1=""
        sed -i "s|^EXC_DEVICE_IPS1=\".*\"$|EXC_DEVICE_IPS1=\"\"|" "$SBS_CONF"
    fi

    echo "Returning to menu."
}

configure_interface2() {
    source "$SBS_CONF"

    if [ -z "$DEVICE_IPS2" ]; then
        echo ""
        echo "Enter IP addresses of devices for $TUN_INTERFACE2 interface?"
    else
        echo ""
        echo "Current IP addresses of devices for $TUN_INTERFACE2 interface: $DEVICE_IPS2"
        echo "Enter other IP addresses instead of these?"
    fi
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to enter IP addresses."; break ;;
            2) read -p "Enter IP addresses: " new_ips2
               DEVICE_IPS2="$new_ips2"
               sed -i "s|^DEVICE_IPS2=\".*\"$|DEVICE_IPS2=\"$new_ips2\"|" "$SBS_CONF"
               log_msg "IP addresses of devices for $TUN_INTERFACE2 interface have been changed."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    local cidrs=$(find_cidrs "$DEVICE_IPS2")
    if [ -n "$cidrs" ]; then
        if [ -z "$EXC_DEVICE_IPS2" ]; then
            echo ""
            echo "For the $TUN_INTERFACE2 interface, you specified the following subnets: $cidrs"
            echo "Enter IP addresses of devices from these subnets to exclude them from the $TUN_INTERFACE2 interface?"
        else
            echo ""
            echo "For the $TUN_INTERFACE2 interface, you specified the following subnets: $cidrs"
            echo "Current IP addresses of devices from these subnets to exclude them from the $TUN_INTERFACE2 interface: $EXC_DEVICE_IPS2"
            echo "Enter other IP addresses instead of these?"
        fi
        while true; do
            read -p "1-No, 2-Yes: " choice_exc
            case "$choice_exc" in
                1) echo "Refusing to enter IP addresses."; break ;;
                2) read -p "Enter IP addresses: " exc_new_ips2
                   EXC_DEVICE_IPS2="$exc_new_ips2"
                   sed -i "s|^EXC_DEVICE_IPS2=\".*\"$|EXC_DEVICE_IPS2=\"$exc_new_ips2\"|" "$SBS_CONF"
                   log_msg "IP addresses of devices to exclude from the $TUN_INTERFACE2 interface have been entered."; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        EXC_DEVICE_IPS2=""
        sed -i "s|^EXC_DEVICE_IPS2=\".*\"$|EXC_DEVICE_IPS2=\"\"|" "$SBS_CONF"
    fi

    echo "Returning to menu."
}

choose_dns() {
    source "$SBS_CONF"
    if [ "$DNS_CHOICE" = "router" ]; then
        echo ""
        echo "Router DNS are currently used."
        echo "Change selection to DNS in sing-box configuration file?" 
    elif [ "$DNS_CHOICE" = "sing-box" ]; then
        echo ""
        echo "DNS of the sing-box configuration file is currently used."
        echo "Change selection to router DNS?"
    fi
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1)  echo "Refusal to change used DNS."; break ;;
            2)  if [ "$DNS_CHOICE" = "router" ]; then
                    DNS_CHOICE="sing-box"
                    echo "DNS of the sing-box configuration file are selected."
                else
                    DNS_CHOICE="router"
                    echo "Router DNS selected."
                fi
                sed -i "s|DNS_CHOICE=\"[^\"]*\"|DNS_CHOICE=\"$DNS_CHOICE\"|" "$SBS_CONF"; break ;;
            *)  echo "Incorrect input. Please try again." ;;
        esac
    done
}

configure_table1() {
    source "$SBS_CONF"

    echo ""
    echo "The current routing table number for $TUN_INTERFACE1 interface is $ROUTE_TABLE1."
    echo "Change it?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to change the routing table number."; break ;;
            2) read -p "Enter the new routing table number: " new_table1
               ROUTE_TABLE1="$new_table1"
               sed -i "s|^ROUTE_TABLE1=\".*\"$|ROUTE_TABLE1=\"$new_table1\"|" "$SBS_CONF"
               log_msg "The routing table number for $TUN_INTERFACE1 interface has been changed to $ROUTE_TABLE1."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
    echo "Returning to menu."
}

configure_table2() {
    source "$SBS_CONF"

    echo ""
    echo "The current routing table number for $TUN_INTERFACE2 interface is $ROUTE_TABLE2."
    echo "Change it?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to change the routing table number."; break ;;
            2) read -p "Enter the new routing table number: " new_table2
               ROUTE_TABLE2="$new_table2"
               sed -i "s|^ROUTE_TABLE2=\".*\"$|ROUTE_TABLE2=\"$new_table2\"|" "$SBS_CONF"
               log_msg "The routing table number for $TUN_INTERFACE2 interface has been changed to $ROUTE_TABLE2."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
    echo "Returning to menu."
}

setup_sing_box() {
    source "$SBS_CONF"
    update_sbs_interfaces
    extract_listen_dns_ports
    source "$SBS_CONF"

    if [ -z "$TUN_INTERFACE1" ] && [ -z "$TUN_INTERFACE2" ]; then
        echo ""
        echo "Your sing-box configuration file does not contain tun interfaces. There is nothing to configure. Exit."
        exit 0
    fi

    echo ""
    echo "Enter the script settings menu? If sing-box is running, selecting option 2 will stop it."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Exit."; exit 0 ;;
            2) if is_running; then stop_sing_box; fi; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    if [ -n "$TUN_INTERFACE1" ] && [ -n "$TUN_INTERFACE2" ]; then
        while true; do
            echo ""
            echo "Script settings menu."
            echo "When setting up for the first time, it is mandatory to complete points 1 and 2."
            echo "1. Setting up IP addresses for $TUN_INTERFACE1 interface."
            echo "2. Setting up IP addresses for $TUN_INTERFACE2 interface."
            echo "3. DNS selection for tun interfaces."
            echo "4. Changing the routing table number for $TUN_INTERFACE1 interface."
            echo "5. Changing the routing table number for $TUN_INTERFACE2 interface."
            echo "6. Editing the script settings file with the nano editor."
            echo "0. Exit the menu."
            read -p "Enter your choice [0-6]: " if_choice
            case "$if_choice" in
                1) configure_interface1; source "$SBS_CONF" ;;
                2) configure_interface2; source "$SBS_CONF" ;;
                3) choose_dns; source "$SBS_CONF" ;;
                4) configure_table1; source "$SBS_CONF" ;;
                5) configure_table2; source "$SBS_CONF" ;;
                6) nano $SBS_CONF; update_sbs_interfaces; source "$SBS_CONF"; echo "Editing complete. Returning to menu."; echo "" ;;
                0) break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        while true; do
            echo ""
            echo "Script settings menu."
            echo "When setting up for the first time, it is mandatory to complete point 1."
            echo "1. Setting up IP addresses for $TUN_INTERFACE1 interface."
            echo "2. DNS selection for $TUN_INTERFACE1 interface."
            echo "3. Changing the routing table number for $TUN_INTERFACE1 interface."
            echo "4. Editing the script settings file with the nano editor."
            echo "0. Exit the menu."
            read -p "Enter your choice  [0-4]: " if_choice
            case "$if_choice" in
                1) configure_interface1; source "$SBS_CONF" ;;
                2) choose_dns; source "$SBS_CONF" ;;
                3) configure_table1; source "$SBS_CONF" ;;
                4) nano $SBS_CONF; update_sbs_interfaces; source "$SBS_CONF"; echo "Editing complete. Returning to menu."; echo "" ;;
                0) break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    fi

    update_sbs_interfaces
    extract_listen_dns_ports
    sing_box_start
}

update_sing_box() {
    echo ""
    echo "Checking the script and sing-box core versions..."
    curl -s -L -o "$SCRIPT_PATH"-tmp "$SCRIPT_URL"
    silent_create_dir "$SB_DOWNLOAD_DIR"
    if [ "$(uname -m)" = "aarch64" ]; then
        DOWNLOAD_URL="$SB_DOWNLOAD64_URL"
        ARCHIVE_PATH="$SB_ARCHIVE64_PATH"
    else
        DOWNLOAD_URL="$SB_DOWNLOAD_URL"
        ARCHIVE_PATH="$SB_ARCHIVE_PATH"
    fi
    curl -s -L -o "$ARCHIVE_PATH" "$DOWNLOAD_URL"
    tar -xzvf "$ARCHIVE_PATH" -C "$SB_DOWNLOAD_DIR" > /dev/null
    echo "The checking was completed successfully."
    update_sing_box_menu
}

update_sing_box_menu() {
    singbox_file=$(find "$SB_DOWNLOAD_DIR" -name "sing-box" -exec test -f {} \; -print)
    chmod 775 $singbox_file
    sbs_vers=$(get_sbs_version $SCRIPT_PATH)
    sb_vers=$(get_sb_version $SB_PATH)
    sbs_vers_new=$(get_sbs_version "$SCRIPT_PATH"-tmp)
    sb_vers_new=$(get_sb_version $singbox_file)

    while true; do
        echo ""
        echo "Update menu."
        echo "If the sing-box is running, selecting 1 or 2 will stop it."
        read -p "1-Update script. Installed version "$sbs_vers", available version $sbs_vers_new
2-Update sing-box core. Installed version "$sb_vers", available version $sb_vers_new
0-Exit the update menu.
Enter your choice [0-2]: " choice
        case "$choice" in
            1) if is_running; then stop_sing_box; fi; update_sbs; dreak ;;
            2) if is_running; then stop_sing_box; fi; updcore_sing_box; break ;;
            0) rm -f "$SCRIPT_PATH"-tmp; rm -rf "$SB_DOWNLOAD_DIR"; echo "Exiting the update menu."; is_running || sing_box_start; exit 0 ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
}

update_sbs() {
    echo ""
    echo "Script update..."
    cp "$SCRIPT_PATH"-tmp $SCRIPT_PATH
    chmod 775 $SCRIPT_PATH

    cat << EOF > $TEMP_UPDATE
#!/bin/sh
rm -f $TEMP_UPDATE
exec $SCRIPT_PATH updmonandcore
EOF
    chmod 775 $TEMP_UPDATE

    exec $TEMP_UPDATE
}

updmonandcore_sing_box() {
    create_sbs_monitor "$SBS_MON"
    echo "The script has been updated successfully. Returning to menu."
    update_sing_box_menu
}

updcore_sing_box() {
    echo ""
    echo "Updating sing-box core..."
    cp "$singbox_file" "$SB_DIR"; echo "The sing-box core has been updated successfully. Returning to menu."
    update_sing_box_menu
}

check_sing_box() {
    while true; do
        echo ""; echo "Checking sing-box configuration file for errors..."
        if ! output=$($SB_PATH check -c $SB_CONFIG 2>&1); then
            echo "An error was found in the configuration file:"
            echo "$output"
            echo "Edit the configuration file in the nano editor?"
            while true; do
                read -p "1-No, 2-Yes: " choice
                case "$choice" in
                    1) echo "Completing the check without correcting the errors."; break 2 ;;
                    2) echo ""; echo "Open the configuration file in the nano editor..."; nano $SB_CONFIG; echo "Editing complete."; break ;;
                    *) echo "Incorrect input. Please try again." ;;
                esac
            done
        else
            echo "No errors were found in the configuration file. Returning to menu."; break
        fi
    done
}

format_sing_box() {
    if ! output=$($SB_PATH format -c $SB_CONFIG 2>&1); then
        echo ""; echo "An error was found in the configuration file:"
        echo "$output"
        echo "First, check for errors and correct them by selecting point 2 of the sing-box configuration file setup menu."
        echo "Returning to menu."
    else
        echo ""; echo "Result of executing format:"
        echo "$output"
        while true; do
            read -p "Save this output of format to your sing-box configuration file?
1-No, 2-Yes: " save_choice
            case "$save_choice" in
                1) echo "You have chosen not to save the output of format. Returning to menu."; break ;;
                2) $SB_PATH format -w -c $SB_CONFIG; echo "Changes have been saved to the configuration file. Returning to menu."; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    fi
}

edit_sb_conf() {
    while true; do
        echo ""
        echo "Menu for setting up the sing-box configuration file."
        echo "1-Open the configuration file in the nano editor."
        echo "2-Check the configuration file for errors."
        echo "3-Tidy up the structure of the configuration file."
        echo "0-Exit the menu."
        read -p "Enter your choice [0-3]: " choice
        case "$choice" in
            1) echo ""; echo "Opening configuration file in nano editor..."; nano $SB_CONFIG; source "$SBS_CONF"; update_sbs_interfaces; echo "Editing complete. Returning to menu." ;;
            2) check_sing_box; source "$SBS_CONF"; update_sbs_interfaces ;;
            3) format_sing_box ;;
            0) if is_running; then
                   echo "It is recommended to restart sing-box if you have made changes to the configuration file."
                   echo "Restart sing-box now to apply changes?"
                   while true; do
                       read -p "1-No, 2-Yes: " sub_choice
                       case "$sub_choice" in
                           1) echo "Exiting the menu. Changes, if you made any, will be applied the next time you restart sing-box."; source "$SBS_CONF"; update_sbs_interfaces; exit 0 ;;
                           2) echo "Restarting sing-box and exiting the menu."; stop_sing_box; sleep 2; start_sing_box; exit 0 ;;
                           *) echo "Incorrect input. Please try again." ;;
                       esac
                   done
               else
                   echo "Exiting the menu."; exit 0
               fi ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
}

status_sing_box() {
    if is_running; then
        echo "sing-box is running."
    else
        echo "sing-box is stopped."
    fi

    sbs_version=$(get_sbs_version $SCRIPT_PATH)
    if [ -n "$sbs_version" ]; then
        echo "Script version: $sbs_version"
    else
        echo "Script version not found."
    fi

    sb_versplat=$(get_sb_versplat $SB_PATH)
    if [ -n "$sb_versplat" ]; then
        echo "sing-box core version: $sb_versplat"
    else
        echo "sing-box core version not found."
    fi

    echo "Router CPU architecture: $(uname -m)"
}

install_sing_box() {
    echo "Install sing-box script?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case $choice in
            1) delete_if_not_current_dir; echo "Installation of sing-box script has been cancelled."; exit 0 ;;
            2) if is_running; then
                echo "The sing-box script has already been installed and started. Continue the installation? If choosing 2, the sing-box will be pre-stopped."
                while true; do
                   read -p "1-No, 2-Yes: " continue_choice
                   case "$continue_choice" in
                       1) delete_if_not_current_dir; echo "Installation of sing-box script has been cancelled."; exit 0 ;;
                       2) stop_sing_box; break ;;
                       *) echo "Incorrect input. Please try again." ;;
                   esac
                done
               else break; fi; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Let's start installing the sing-box script..."
    create_or_use_existing "$JFFS_SB_DIR"
    handle_existing_file "$SCRIPT_PATH" self_copy
    ln -sf $SCRIPT_PATH $LN_PATH
    handle_existing_file "$JFFS_SB_DIR/sbs-conf" create_sbs_conf
    handle_existing_file "$SBS_MON" create_sbs_monitor
    check_file_existence_and_download "$SB_CONFIG" "$SB_CONFIG_URL"
    chmod 664 "$SB_CONFIG"

    if [ -n "$ROOT_DIR" ]; then
        create_or_use_existing "$SB_DIR"
    else
        echo "Directory $ROOT_DIR not found. Apparently the router does not have a USB drive with Entware installed. Operation cancelled."
        delete_if_not_current_dir
        exit 1
    fi

    create_dir "$SB_DOWNLOAD_DIR"
    if [ "$(uname -m)" = "aarch64" ]; then
        DOWNLOAD_URL="$SB_DOWNLOAD64_URL"
        ARCHIVE_PATH="$SB_ARCHIVE64_PATH"
    else
        DOWNLOAD_URL="$SB_DOWNLOAD_URL"
        ARCHIVE_PATH="$SB_ARCHIVE_PATH"
    fi
    echo "Download the archive with the sing-box core..."
    curl -s -L -o "$ARCHIVE_PATH" "$DOWNLOAD_URL"
    echo "Unpack the archive..."
    tar -xzvf "$ARCHIVE_PATH" -C "$SB_DOWNLOAD_DIR"
    sing_box_file=$(find "$SB_DOWNLOAD_DIR" -name "sing-box" -exec test -f {} \; -print)

    if [ -f "$SB_PATH" ]; then
        echo "The sing-box core file already exists. What do you want to do?"
        while true; do
            read -p "1-Leave the current file, 2-Replace the file: " choice
            case $choice in
                1) echo "Leave the current file."; break ;;
                2) cp "$sing_box_file" "$SB_DIR"; chmod 775 "$SB_PATH"; echo "The $SB_PATH file has been replaced."; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        cp "$sing_box_file" "$SB_DIR"; echo "The sing-box core file has been moved to the $SB_DIR directory."
    fi

    local current_dir=$(dirname "$(readlink -f "$0")")
    if [ "$current_dir" != "$JFFS_SB_DIR" ]; then
      rm -rf "$SB_DOWNLOAD_DIR" "$(readlink -f "$0")"
    else
      rm -rf "$SB_DOWNLOAD_DIR"
    fi

    echo "The $SB_DOWNLOAD_DIR directory has been removed."
    echo ""
    echo "
*********************
Installation completed.
*********************
Before running sing-box for the first time, be sure to follow the script setup steps described in the Readme - Section IV. Initial setup and running the script."
}

remove_sing_box() {
    echo "Remove all directories and files of the sing-box script? If sing-box is running, choosing 2 will stop it first."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case $choice in
            1) echo "Exit."; exit 0 ;;
            2) if is_running; then stop_sing_box; fi; echo "Removing all sing-box script directories and files."; rm -rf $SB_DIR $JFFS_SB_DIR $LN_PATH; echo "All sing-box script directories and files have been removed."; exit 0 ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

}

show_menu() {
    echo "To run the sing-box script, you can run the 'sbs' command with the parameters listed below directly in the console, for example 'sbs start', or you can run it from this menu by the parameter number."
    echo "Enter the number of the parameter to run or exit this menu:"
    echo "1) start (Start sing-box)"
    echo "2) stop (Stop sing-box)"
    echo "3) restart (Restart sing-box)"
    echo "4) setup (Open the script settings menu)"
    echo "5) edit (Open the menu for setting up the sing-box configuration file - config.json)"
    echo "6) update (Open the script and sing-box core update menu)"
    echo "7) status (Find out the status of sing-box, the versions of the script and sing-box core, and the router's CPU architecture)"
    echo "10) remove (!!!Remove sing-box completely!!!)"
    echo "0) Exit the menu."
}

case "$1" in
    install) install_sing_box ;;
    start) start_sing_box ;;
    stop) stop_sing_box ;;
    restart) stop_sing_box; sleep 2; start_sing_box ;;
    setup) setup_sing_box ;;
    edit) edit_sb_conf ;;
    update) update_sing_box ;;
    status) status_sing_box ;;
    remove) remove_sing_box ;;
    updmonandcore) updmonandcore_sing_box ;;
    *)
        while true; do
            show_menu
            read -p "Enter your choice [0-7 or 10]: " choice
            case $choice in
                1) start_sing_box; break ;;
                2) stop_sing_box; break ;;
                3) stop_sing_box; sleep 2; start_sing_box; break ;;
                4) setup_sing_box; break ;;
                5) edit_sb_conf; break ;;
                6) update_sing_box; break ;;
                7) status_sing_box; break ;;
                10) remove_sing_box; break ;;
                0) exit 0 ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done ;;
esac
