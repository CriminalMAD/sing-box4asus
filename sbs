#!/bin/sh

# Script for running Sing-Box on Asus routers with Merlin firmware and Entware installed on a USB drive.

# Variables
JFFS_SB_DIR="/jffs/addons/sing-box-script"
SB_CONFIG="$JFFS_SB_DIR/config.json"
SCRIPT_PATH="$JFFS_SB_DIR/sbs"
SBS_CONF="$JFFS_SB_DIR/sbs-conf"
SBS_MON="$JFFS_SB_DIR/sbs-monitor"
TEMP_UPDATE="$JFFS_SB_DIR/temp-update"
ROOT_DIR="/opt/root"
SB_DIR="$ROOT_DIR/sing-box"
SB_PATH="$SB_DIR/sing-box"
SB_DOWNLOAD_DIR="$SB_DIR/sing-box-download"
SB_ARCHIVE_PATH="$SB_DOWNLOAD_DIR/sing-box-linux-arm64.tar.gz"
SCRIPT_URL="https://raw.githubusercontent.com/Dr4tez/sing-box4asus/main/sbs"
SB_URL="https://api.github.com/repos/SagerNet/sing-box/releases/latest"
SB_DOWNLOAD_URL=$(curl -s -H "Accept: application/vnd.github.v3+json" "$SB_URL" | grep -o '"browser_download_url":\s*"[^"]*linux-arm64.tar.gz"' | grep -o 'https://.*linux-arm64.tar.gz')
SS_DIR="/jffs/scripts"
FW_SCRIPT="$SS_DIR/firewall-start"
SS_SCRIPT="$SS_DIR/services-start"
SS_LINES="sleep 30
$SCRIPT_PATH start"
LN_PATH="/opt/bin/sbs"

# Functions
log_msg() {
    echo "$1"
    logger -t "sbs" "$1"
}

create_dir() {
    mkdir -p "$1"
    chmod 775 "$1"
    echo "Directory $1 created."
}

dir_exists() {
    [ -d "$1" ]
}

create_sbs_conf() {
    cat << EOF > "$1"
# This file is created automatically and the values are entered via the command line when executing the 'sbs setup' command.
# If you want to change the values here using an editor bypassing the 'sbs setup' command, then before doing so, be sure to stop sing-box with the 'sbs stop' command in the command line.

# Enter in quotes on one line, separated by spaces, the IP addresses of the devices whose traffic needs to be directed through the sing-box tun interface.
DEVICE_IPS="192.168.50.31 192.168.50.32"

# If the specified routing table number 555 on your router is already taken, which is unlikely, assign another number that is not taken.
ROUTE_TABLE="555"

# This value is determined automatically. It is here only because it is needed for sbs-monitor to work.
TUN_INTERFACE="sbtun"
EOF
    chmod 664 "$1"
}

create_sbs_monitor() {
    cat << EOF > "$1"
#!/bin/sh

source "$SBS_CONF"

log_msg() {
    echo "\$1"
    logger -t "sbs" "\$1"
}

add_rr() {
    existing_route=\$(ip route show table "\$ROUTE_TABLE" | grep "default dev \$TUN_INTERFACE")
    if [ -z "\$existing_route" ]; then
        ip route add default dev "\$TUN_INTERFACE" table "\$ROUTE_TABLE"
        log_msg "Route added: ip route add default dev \$TUN_INTERFACE table \$ROUTE_TABLE"
    fi
    existing_rule=\$(ip rule show | grep "lookup \$ROUTE_TABLE")
    if [ -z "\$existing_rule" ]; then
        for IP in \$DEVICE_IPS; do ip rule add from \$IP table \$ROUTE_TABLE; done
        log_msg "IP rules for routing table \$ROUTE_TABLE added"
    fi
}

sbs_monitor_rr() {
    ip monitor route | while read -r line; do
        log_msg "Change detected: \$line"
        echo "\$line" | grep -q "dev \$TUN_INTERFACE table"
        if [ \$? -eq 0 ]; then
            add_rr
        fi
    done
}

trap '' SIGHUP

sbs_monitor_rr
EOF
    chmod 775 "$1"
}

check_file_existence_and_download() {
    local file_path="$1"
    local file_url="$2"
    local file_name=$(basename "$file_path")

    if [ -f "$file_path" ]; then
    echo "The file $file_name already exists. What do you want to do??"
        while true; do
            read -p "1-Skip download, 2-Download and replace file: " choice
            case $choice in
                1) echo "Download of $file_name skipped."; return 0 ;;
                2) echo "Download and replace the file $file_name"; curl -s -L -o "$file_path" "$file_url"; return 0 ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        echo "Downloading $file_name..."
        curl -s -L -o "$file_path" "$file_url"
    fi
}

delete_if_not_current_dir() {
  local current_dir=$(dirname "$(readlink -f "$0")")
  if [ "$current_dir" != "$JFFS_SB_DIR" ]; then
    rm -f "$(readlink -f "$0")"
  fi
}

create_or_use_existing() {
    local dir_path="$1"
    if dir_exists "$dir_path"; then
    echo "The directory $dir_path already exists. What do you want to do?"
        while true; do
            read -p "1-Quit, 2-Use current directory: " choice
            case $choice in
                1) delete_if_not_current_dir; echo "The script has completed its work."; exit 0 ;;
                2) echo "Use current directory $dir_path"; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        create_dir "$dir_path"
    fi
}

handle_existing_file() {
    local file_path="$1"
    local create_function="$2"
    if [ -f "$file_path" ]; then
    echo "The file $file_path already exists. What do you want to do?"
        while true; do
            read -p "1-Leave the current file, 2-Replace the file: " choice
            case $choice in
                1) echo "We leave the current file."; break ;;
                2) echo "Replace the $file_path file"; "$create_function" "$file_path"; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        "$create_function" "$file_path"
    fi
}

ensure_script() {
    [ -f "$1" ] || { echo "#!/bin/sh" > "$1"; chmod 755 "$1"; }
}

update_script() {
    ensure_script "$1"
    echo "$2" | while read -r line; do
        grep -qF "$line" "$1" || echo "$line" >> "$1"
    done
}

remove_script_content() {
    [ -f "$1" ] && echo "$2" | while read -r line; do
        sed -i "/$(echo "$line" | sed 's/[\/&]/\\&/g')/d" "$1"
    done
}

manage_iptables() {
    if [ "$1" = "add" ]; then
        iptables -C $2 2>/dev/null || iptables -I $2 || log_msg "Error adding iptables rule: $2"
    elif [ "$1" = "remove" ]; then
        iptables -C $2 2>/dev/null && iptables -D $2 || log_msg "Error removing iptables rule: $2"
    fi
}

is_running() {
    ps | grep -v grep | grep -q "$SB_PATH"
}

self_copy() {
    local destination="$1"
    cp "$0" "$destination"
}

sing_box_start() {
    echo "Launch sing-box?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "sing-box is not running."; break ;;
            2) start_sing_box; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
}

start_sing_box() {
    log_msg "Launch sing-box..."

    is_running && { log_msg "Error: sing-box is already running."; exit 1; }

    source "$SBS_CONF"

    if [ -f "$SB_CONFIG" ]; then
        local config_content=$(cat "$SB_CONFIG")
        local new_iface=$(echo "$config_content" | grep '"interface_name":' | sed -n 's/.*"interface_name": "\(.*\)".*/\1/p')
        if [ -n "$new_iface" ] && [ "$new_iface" != "$TUN_INTERFACE" ]; then
            TUN_INTERFACE="$new_iface"
            sed -i "s|^TUN_INTERFACE=\".*\"$|TUN_INTERFACE=\"$TUN_INTERFACE\"|" "$SBS_CONF"
            log_msg "TUN interface name updated to $TUN_INTERFACE"
        elif [ -z "$new_iface" ]; then
            log_msg "Error: Failed to retrieve TUN interface name from $SB_CONFIG"
            exit 1
        fi
    else
        log_msg "Error: $SB_CONFIG file not found."
        exit 1
    fi

    FW_RULES="FORWARD -i $TUN_INTERFACE -j ACCEPT
    FORWARD -o $TUN_INTERFACE -j ACCEPT
    INPUT -i $TUN_INTERFACE -j ACCEPT
    OUTPUT -o $TUN_INTERFACE -j ACCEPT"

    lsmod | grep -q "^tun " || { log_msg "Loading TUN module..."; modprobe tun; }

    $SB_PATH run -c $SB_CONFIG &
    sleep 3

    ip link show $TUN_INTERFACE >/dev/null 2>&1 || { log_msg "Error: TUN interface $TUN_INTERFACE not found."; exit 1; }

    log_msg "Setting up the routing table..."
    ip route add default dev $TUN_INTERFACE table $ROUTE_TABLE
    for IP in $DEVICE_IPS; do ip rule add from $IP table $ROUTE_TABLE; done

    log_msg "Adding firewall rules..."
    echo "$FW_RULES" | while read -r rule; do
        manage_iptables "add" "$rule"
    done

    log_msg "Updating firewall-start script..."
    echo "$FW_RULES" | while read -r rule; do
        update_script "$FW_SCRIPT" "iptables -I $rule"
    done

    log_msg "Updating the services-start script..."
    update_script "$SS_SCRIPT" "$SS_LINES"
    log_msg "sing-box is running."

    $SBS_MON &
    log_msg "sbs-monitor is running."
}

stop_sing_box() {
    log_msg "Stop sing-box..."

    source "$SBS_CONF"

    FW_RULES="FORWARD -i $TUN_INTERFACE -j ACCEPT
    FORWARD -o $TUN_INTERFACE -j ACCEPT
    INPUT -i $TUN_INTERFACE -j ACCEPT
    OUTPUT -o $TUN_INTERFACE -j ACCEPT"

    pids=$(pidof "sbs-monitor")
    if [ -z "$pids" ]; then
      break
    fi
    for pid in $pids; do
      kill "$pid"
    done
    log_msg "sbs-monitor has stopped."

    PIDS=$(pidof "sing-box")
    if [ -z "$PIDS" ]; then
      break
    fi
    for pid in $PIDS; do
      kill "$pid"
    done

    log_msg "Removing routing rules..."
    for IP in $DEVICE_IPS; do ip rule del from $IP table $ROUTE_TABLE; done
    ip route del default dev $TUN_INTERFACE table $ROUTE_TABLE 2>/dev/null || true

    log_msg "Removing firewall rules..."
    log_msg "Updating firewall-start script..."
    echo "$FW_RULES" | while read -r rule; do
        manage_iptables "remove" "$rule"
        remove_script_content "$FW_SCRIPT" "iptables -I $rule"
    done

    log_msg "Updating the services-start script..."
    remove_script_content "$SS_SCRIPT" "$SS_LINES"
    log_msg "sing-box has stopped."
}

setup_sing_box() {
    echo "Change script settings? If sing-box is running, selecting option 2 will stop it."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Exit the setup menu."; exit 0 ;;
            2) if is_running; then stop_sing_box; fi; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Go to script setup."

    source "$SBS_CONF"

    echo "Current IP addresses of devices: $DEVICE_IPS. Change them? If you select 2, current IP addresses will be replaced with the entered ones."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to replace IP addresses."; break ;;
            2) read -p "Enter new IP addresses of devices: " new_ips
               DEVICE_IPS="$new_ips"
               sed -i "s|^DEVICE_IPS=\".*\"$|DEVICE_IPS=\"$new_ips\"|" "$SBS_CONF"
               log_msg "IP addresses of devices have been changed."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Edit config.json (sing-box configuration file) using nano editor?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to editing config.json."; break ;;
            2) echo "Opening config.json in nano editor."; nano $SB_CONFIG; echo "config.json saved."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Current routing table number: $ROUTE_TABLE. Change it?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Refusing to change the routing table number."; break ;;
            2) read -p "Enter the new routing table number: " new_table
               ROUTE_TABLE="$new_table"
               sed -i "s|^ROUTE_TABLE=\".*\"$|ROUTE_TABLE=\"$new_table\"|" "$SBS_CONF"
               log_msg "Routing table number changed to $ROUTE_TABLE."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Settings have been saved."

    sing_box_start
}

edit_sing_box() {
    echo "Edit sbs-conf (script settings file) with nano editor? If sing-box is running, selecting 2 will stop it."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "Exit."; exit 0 ;;
            2) if is_running; then stop_sing_box; fi; echo "Opening sbs-conf in nano editor."; nano $SBS_CONF; echo "sbs-conf saved."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    sing_box_start
}

update_sing_box() {
    echo "Update sing-box script? If sing-box is running, selecting 2 will stop it."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case "$choice" in
            1) echo "The sing-box script update has been cancelled."; exit 0 ;;
            2) if is_running; then stop_sing_box; fi; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Update sing-box script..."

    curl -s -L -o "$SCRIPT_PATH" "$SCRIPT_URL"
    if [ $? -ne 0 ]; then
      echo "Error: failed to download file from $SCRIPT_URL"
      exit 1
    fi
    chmod 775 "$SCRIPT_PATH"
    echo "The main script has been updated successfully."

    cat << EOF > $TEMP_UPDATE
#!/bin/sh
rm -f $TEMP_UPDATE
exec $SCRIPT_PATH updmonandcore
EOF
    chmod 775 $TEMP_UPDATE

    exec $TEMP_UPDATE
}

updmonandcore_sing_box() {
    create_sbs_monitor "$SBS_MON"
    echo "The sbs-monitor script has been updated successfully."

    create_dir "$SB_DOWNLOAD_DIR"
    curl -s -L -o "$SB_ARCHIVE_PATH" "$SB_DOWNLOAD_URL"
    tar -xzvf "$SB_ARCHIVE_PATH" -C "$SB_DOWNLOAD_DIR"
    sing_box_file=$(find "$SB_DOWNLOAD_DIR" -name "sing-box" -type f)

    echo "Update sing-box core file?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case $choice in
            1) echo "$SB_PATH file update cancelled."; break ;;
            2) cp "$sing_box_file" "$SB_DIR"; chmod 775 "$SB_PATH"; echo "The $SB_PATH file has been updated successfully."; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done
    
    rm -rf "$SB_DOWNLOAD_DIR"
    echo "The $SB_DOWNLOAD_DIR directory has been deleted."

    sing_box_start
}

install_sing_box() {
    echo "Install sing-box script?"
    while true; do
        read -p "1-No, 2-Yes: " choice
        case $choice in
            1) delete_if_not_current_dir; echo "Installation of sing-box script has been cancelled."; exit 0 ;;
            2) if is_running; then
                echo "The sing-box script has already been installed and started. Continue the installation? If choosing 2, the sing-box will be pre-stopped."
                while true; do
                   read -p "1-No, 2-Yes: " continue_choice
                   case "$continue_choice" in
                       1) delete_if_not_current_dir; echo "Installation of sing-box script has been cancelled."; exit 0 ;;
                       2) stop_sing_box; break ;;
                       *) echo "Incorrect input. Please try again." ;;
                   esac
                done
               else break; fi; break ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

    echo "Let's start installing the sing-box script..."

    create_or_use_existing "$JFFS_SB_DIR"

    handle_existing_file "$SCRIPT_PATH" self_copy

    ln -sf $SCRIPT_PATH $LN_PATH

    handle_existing_file "$JFFS_SB_DIR/sbs-conf" create_sbs_conf

    handle_existing_file "$SBS_MON" create_sbs_monitor

    check_file_existence_and_download "$SB_CONFIG" "https://raw.githubusercontent.com/Dr4tez/sing-box4asus/main/config.json"
    chmod 664 "$SB_CONFIG"

    if [ -n "$ROOT_DIR" ]; then
        create_or_use_existing "$SB_DIR"
    else
        echo "Directory $ROOT_DIR not found. Apparently the router does not have a USB drive with Entware installed. Operation cancelled."
        delete_if_not_current_dir
        exit 1
    fi

    create_dir "$SB_DOWNLOAD_DIR"
    echo "Download the archive with the file sing-box..."
    curl -s -L -o "$SB_ARCHIVE_PATH" "$SB_DOWNLOAD_URL"
    echo "Unpack the archive..."
    tar -xzvf "$SB_ARCHIVE_PATH" -C "$SB_DOWNLOAD_DIR"
    sing_box_file=$(find "$SB_DOWNLOAD_DIR" -name "sing-box" -type f)

    if [ -f "$SB_PATH" ]; then
        echo "The file sing-box already exists. What do you want to do?"
        while true; do
            read -p "1-Leave the current file, 2-Replace the file: " choice
            case $choice in
                1) echo "Leave the current file."; break ;;
                2) cp "$sing_box_file" "$SB_DIR"; chmod 775 "$SB_PATH"; echo "The $SB_PATH file has been replaced."; break ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done
    else
        cp "$sing_box_file" "$SB_DIR"; echo "The sing-box file has been moved to the $SB_DIR directory."
    fi

    local current_dir=$(dirname "$(readlink -f "$0")")
    if [ "$current_dir" != "$JFFS_SB_DIR" ]; then
      rm -rf "$SB_DOWNLOAD_DIR" "$(readlink -f "$0")"
    else
      rm -rf "$SB_DOWNLOAD_DIR"
    fi

    echo "The $SB_DOWNLOAD_DIR directory has been removed."

    echo "

*********************
Installation completed.
*********************
1. Before starting sing-box for the first time, be sure to run the command
sbs setup
During its execution, you can enter the IP addresses of the devices whose traffic you want to route through the sing-box, edit config.json (the sing-box configuration file) in the nano editor, and also change the routing table number (optional).
2. You can start sing-box with the command:
sbs start

Hints for all commands can be seen by running the command in the router console:
sbs"
}

remove_sing_box() {
    echo "Remove all directories and files of the sing-box script? If sing-box is running, choosing 2 will stop it first."
    while true; do
        read -p "1-No, 2-Yes: " choice
        case $choice in
            1) echo "Exit."; exit 0 ;;
            2) if is_running; then stop_sing_box; fi; echo "Removing all sing-box script directories and files."; rm -rf $SB_DIR $JFFS_SB_DIR $LN_PATH; echo "All sing-box script directories and files have been removed."; exit 0 ;;
            *) echo "Incorrect input. Please try again." ;;
        esac
    done

}

show_menu() {
    echo "To run the sing-box script, you can run the 'sbs' command with the parameters listed below directly in the console, for example 'sbs start', or you can run it from this menu by the parameter number."
    echo "Enter the number of the parameter to run or exit this menu:"
    echo "1) start (Start sing-box)"
    echo "2) stop (Stop sing-box)"
    echo "3) restart (Restart sing-box)"
    echo "4) setup (Step-by-step script setup)"
    echo "5) edit (Edit sbs-conf -script settings file)"
    echo "6) update (Update script file, sbs-monitor file and sing-box core file)"
    echo "7) remove (!!!Remove sing-box completely!!!)"
    echo "8) Exit the menu."
}

# Menu
case "$1" in
    start) start_sing_box ;;
    stop) stop_sing_box ;;
    restart) stop_sing_box && start_sing_box ;;
    setup) setup_sing_box ;;
    edit) edit_sing_box ;;
    update) update_sing_box ;;
    remove) remove_sing_box ;;
    install) install_sing_box ;;
    updmonandcore) updmonandcore_sing_box ;;
    *)
        while true; do
            show_menu
            read -p "Enter your choice [1-8]: " choice
            case $choice in
                1) start_sing_box; break ;;
                2) stop_sing_box; break ;;
                3) stop_sing_box && start_sing_box; break ;;
                4) setup_sing_box; break ;;
                5) edit_sing_box; break ;;
                6) update_sing_box; break ;;
                7) remove_sing_box; break ;;
                8) exit 0 ;;
                *) echo "Incorrect input. Please try again." ;;
            esac
        done ;;
esac
